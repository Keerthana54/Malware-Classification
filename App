from flask import Flask, flash, request, redirect, url_for, render_template
import glob
import csv
import numpy as np
from keras.models import load_model
import os
from werkzeug.utils import secure_filename

# Configuring Flask
UPLOAD_FOLDER = 'static/uploads'

app = Flask(__name__)
app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.secret_key = "secret key"
def initialize():
    with open("dataset/header.txt", "r") as file:
        headers = file.readlines()
        headers = [header.strip() for header in headers]
        headers = list(filter(None, headers))
        return headers



def predict(file):
    global classifier
    row = [0 for i in range(len(headers))]
    with open(file, "r") as func_file:
        functions = func_file.readlines()
        functions = [function.strip() for function in functions]
        functions = list(filter(None, functions))
        if len(functions) > 5:
            for function in functions:
                if function[-1] == "W":
                    function = function[:-1]
                elif function[-2] == "A":
                    function = function[:-1]
                try:
                    row[headers.index(function)] = 1
                except ValueError:
                    pass
    prediction =  classifier.predict(np.array([row]))[0]
    return np.argmax(prediction)


@app.route('/')
def home():
    return render_template('malware.html')


########################### Result Functions ########################################


@app.route('/result', methods=['POST'])
def resultc():
    if request.method == 'POST':
        file = request.files['file']
        filename = secure_filename(file.filename)
        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        flash('File successfully uploaded and displayed below')
        pred = predict('static/uploads/'+filename)
        return render_template('result.html', filename=filename, r=pred)


# No caching at all for API endpoints.
@app.after_request
def add_header(response):
    """
    Add headers to both force latest IE rendering engine or Chrome Frame,
    and also to cache the rendered page for 10 minutes.
    """
    response.headers['X-UA-Compatible'] = 'IE=Edge,chrome=1'
    response.headers['Cache-Control'] = 'public, max-age=0'
    return response


if __name__ == '__main__':
    classifier = load_model("models/model.h5")
    headers = initialize()
    app.run(debug=True)
